# -*- coding: utf-8 -*-
"""eda_scr_ven_int.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k6DaVv9BU0Tylv-HxTWYjUv3JDAgWeZW
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as msno
import logging
from typing import Optional

# Configurações de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Parâmetros externos
CAMINHO_S3 = 's3://brasilseg-analise-performance-comercial/interacoes-vendas/data_processed/dataset_unificado.parquet'
STORAGE_OPTIONS = {}  # Preencha se necessário


def ler_dados(caminho: str) -> Optional[pd.DataFrame]:
    try:
        df = pd.read_parquet(caminho, storage_options=STORAGE_OPTIONS)
        logging.info("Dados carregados com sucesso.")
        return df
    except Exception as e:
        logging.error(f"Erro ao carregar dados: {e}")
        return None


def analise_qualitativa(df: pd.DataFrame) -> None:
    print("\nAnálise Descritiva:\n")
    print(f"- Colunas: {df.columns.tolist()}")
    print(f"- Dimensão: {df.shape[0]} linhas × {df.shape[1]} colunas")
    print(f"- Tipos de dados:\n{df.dtypes.to_string()}")

    perc_validos = df.notna().sum().sum() / df.size * 100
    perc_na = df.isna().sum().sum() / df.size * 100
    perc_na_coluna = df.isna().mean() * 100

    print(f"\n- % de valores válidos: {perc_validos:.2f}%")
    print(f"- % de valores nulos: {perc_na:.2f}%")
    print("\n- Distribuição de NAs por coluna (%):")
    print(perc_na_coluna.round(2))

    msno.matrix(df)
    plt.title("Matriz de Nulos")
    plt.show()


def taxa_percentual(parte: int, total: int) -> float:
    return (parte / total * 100) if total > 0 else 0


def analise_quantitativa(df: pd.DataFrame) -> None:
    print("\nAnálise Estatística:")

    # Conversão de datas
    df["data_interacao"] = pd.to_datetime(df["data_interacao"], errors="coerce")
    df["data_venda"] = pd.to_datetime(df["data_venda"], errors="coerce")

    # Taxas de conversão
    total_interacoes = len(df)
    vendas_efetivadas = df.query('motivo == "venda" and status == "efetivado"').shape[0]
    taxa_conv = taxa_percentual(vendas_efetivadas, total_interacoes)

    print("\nIndicador de Funil - Taxa de Conversão")
    print(f"- Total de interações: {total_interacoes}")
    print(f"- Vendas efetivadas: {vendas_efetivadas}")
    print(f"- Taxa de conversão: {taxa_conv:.2f}%")

    vendas = df[df["motivo"] == "venda"]
    efetivadas = vendas[vendas["status"] == "efetivado"]
    taxa_efetivacao = taxa_percentual(len(efetivadas), len(vendas))

    print("\nIndicador de Funil - Efetivação")
    print(f"- Vendas registradas: {len(vendas)}")
    print(f"- Vendas efetivadas: {len(efetivadas)}")
    print(f"- Taxa de efetivação: {taxa_efetivacao:.2f}%")

    # Valor médio
    print("\nValor médio por motivo:")
    print(df.groupby("motivo")["valor_premio"].mean().round(2))

    print("\nValor médio por motivo e status:")
    print(df.groupby(["motivo", "status"])["valor_premio"].mean().unstack().round(2))

    # Tempo até venda
    df["dias_entre_interacao_e_venda"] = (df["data_venda"] - df["data_interacao"]).dt.days
    df_validos = df[df["dias_entre_interacao_e_venda"] >= 0]

    print("\nTempo médio até a venda por canal:")
    print(df_validos.groupby("canal_venda")["dias_entre_interacao_e_venda"].mean().round(2))

    # Clientes com múltiplas vendas
    vendas_por_cliente = vendas.groupby("id_cliente").size()
    clientes_multiplos = (vendas_por_cliente > 1).sum()
    total_clientes = vendas_por_cliente.shape[0]
    perc_multiplos = taxa_percentual(clientes_multiplos, total_clientes)

    print(f"\nTotal de clientes com vendas: {total_clientes}")
    print(f"Clientes com >1 venda: {clientes_multiplos} ({perc_multiplos:.2f}%)")

    # Tempo médio entre interações
    df_sorted = df.sort_values(["id_cliente", "data_interacao"])
    df_sorted["diff_dias"] = df_sorted.groupby("id_cliente")["data_interacao"].diff().dt.days
    media_entre_interacoes = df_sorted.groupby("id_cliente")["diff_dias"].mean().mean()

    print(f"\nTempo médio geral entre interações: {media_entre_interacoes:.2f} dias")

    # CLV
    clientes_ativos = efetivadas["id_cliente"].unique()
    df_ativos = df[df["id_cliente"].isin(clientes_ativos)]
    clv = df_ativos.groupby("id_cliente")["valor_premio"].sum()
    print(f"\nCLV médio: R$ {clv.mean():,.2f} | CLV total: R$ {clv.sum():,.2f}")

    # Tempo médio de atendimento
    if "tempo_resposta_segundos" in df.columns:
        tempo_resposta = df["tempo_resposta_segundos"].mean()
        print(f"\nTempo médio de atendimento: {tempo_resposta:.2f} segundos")

    # Percentual de registros válidos
    df_validos = df[df["id_venda"].notna() & (df["status"] == "efetivado") & df["data_venda"].notna()]
    print(f"\nRegistros válidos: {taxa_percentual(len(df_validos), len(df)):.2f}%")

    # Conversão por canal
    interacoes_canal = df.groupby("canal_venda").size()
    vendas_canal = efetivadas.groupby("canal_venda").size()
    taxa_canal = (vendas_canal / interacoes_canal * 100).fillna(0).round(2)

    print("\nTaxa de Conversão por Canal (%):")
    print(taxa_canal)

    # Volume e valor por canal
    print("\nResumo por Canal:")
    print(vendas.groupby("canal_venda").agg(
        volume_vendas=("id_venda", "count"),
        valor_total=("valor_premio", "sum")
    ).sort_values(by="valor_total", ascending=False))

    # Volume e valor por produto
    print("\nResumo por Tipo de Produto:")
    print(vendas.groupby("tipo_produto").agg(
        volume_vendas=("id_venda", "count"),
        valor_total=("valor_premio", "sum")
    ).sort_values(by="valor_total", ascending=False))

    # Estatísticas de valor
    print("\nEstatísticas de valor do prêmio:")
    print(df["valor_premio"].agg(Soma="sum", Média="mean").round(2))

    # Crescimento percentual do prêmio
    premio_dia = df.groupby("data_venda")["valor_premio"].sum()
    crescimento = premio_dia.pct_change().round(2) * 100

    print("\nTaxa de crescimento percentual do prêmio por dia:")
    print(crescimento.dropna())

    # Cancelamentos
    cancelamentos = df[df["motivo"] == "cancelamento"]
    total_cancel = len(cancelamentos)
    efetivados = cancelamentos[cancelamentos["status"] == "efetivado"]
    taxa_cancel = taxa_percentual(len(efetivados), total_cancel)

    print("\nCancelamentos:")
    print(f"- Total solicitados: {total_cancel}")
    print(f"- Efetivados: {len(efetivados)}")
    print(f"- Taxa de efetivação: {taxa_cancel:.2f}%")

    cancel_por_data = cancelamentos.groupby("data_interacao").size()
    print(f"- Média/dia: {cancel_por_data.mean():.2f}")
    print(f"- Mínimo/dia: {cancel_por_data.min()}")
    print(f"- Máximo/dia: {cancel_por_data.max()}")
    print(f"- Dias com cancelamento: {cancel_por_data.shape[0]}")


def execucao():
    df = ler_dados(CAMINHO_S3)
    if df is not None:
        analise_qualitativa(df)
        analise_quantitativa(df)


if __name__ == "__main__":
    execucao()